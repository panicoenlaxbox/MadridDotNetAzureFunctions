# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger: none

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'ServiceConnection1'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)'

  functionAppDirectory: '$(System.DefaultWorkingDirectory)/FunctionApp1'

  terraformDirectory: '$(System.DefaultWorkingDirectory)/terraform'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(functionAppDirectory)/*.csproj
        arguments: --output $(functionAppDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(functionAppDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(terraformDirectory)'
        artifact: 'terraform'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: TerraformInstaller@0
            displayName: 'Terraform installer'
            inputs:
              terraformVersion: '0.12.26'
          - task: TerraformTaskV1@0
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              backendServiceArm: 'ServiceConnection1'
              backendAzureRmResourceGroupName: 'rg-terraform'
              backendAzureRmStorageAccountName: 'backend0906'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'my_project.terraform.tfstate'
          - task: TerraformTaskV1@0
            displayName: 'terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              commandOptions: '-out=tfplan'
              environmentServiceNameAzureRM: 'ServiceConnection1'
          - task: TerraformTaskV1@0
            displayName: 'terraform apply'
            name: terraformApply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              commandOptions: '-auto-approve tfplan'
              environmentServiceNameAzureRM: 'ServiceConnection1'
          - task: terraform-outputs@0
            displayName: 'Terraform outputs'
            inputs:
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              mapSensitiveOutputsAsSecrets: true
              variablePrefix: 'tf.'
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(tf.my_function_app_name)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'